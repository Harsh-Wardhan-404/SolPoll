generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  walletAddress String   @unique
  username      String   @unique
  avatar        String?
  karma         Float    @default(0)
  createdAt     DateTime @default(now())

  createdPolls Poll[]    @relation("PollCreator")
  votes        Vote[]
  comments     Comment[]
  reports      Report[]
}

model Poll {
  id          String   @id @default(cuid())
  title       String
  description String?
  type        PollType
  category    String
  stakeAmount Float // Amount in SOL
  isPremium   Boolean  @default(false)
  isActive    Boolean  @default(true)
  startTime   DateTime @default(now())
  endTime     DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  creator   User      @relation("PollCreator", fields: [creatorId], references: [id])
  creatorId String
  options   Option[]
  votes     Vote[]
  comments  Comment[]
  reports   Report[]
}

model Option {
  id        String   @id @default(cuid())
  text      String
  poll      Poll     @relation(fields: [pollId], references: [id])
  pollId    String
  votes     Vote[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Vote {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  poll      Poll     @relation(fields: [pollId], references: [id])
  pollId    String
  option    Option   @relation(fields: [optionId], references: [id])
  optionId  String
  createdAt DateTime @default(now())

  @@unique([userId, pollId]) // One vote per user per poll
}

// Comment model
model Comment {
  id        String   @id @default(cuid())
  content   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  poll      Poll     @relation(fields: [pollId], references: [id])
  pollId    String
  upvotes   Int      @default(0)
  downvotes Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Report model for moderation
model Report {
  id        String       @id @default(cuid())
  reason    String
  status    ReportStatus @default(PENDING)
  user      User         @relation(fields: [userId], references: [id])
  userId    String
  poll      Poll         @relation(fields: [pollId], references: [id])
  pollId    String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

// Enums
enum PollType {
  BINARY
  MULTIPLE_CHOICE
  CUSTOM
}

enum ReportStatus {
  PENDING
  REVIEWED
  RESOLVED
  DISMISSED
}
